
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Create GUI Window (mobile-friendly size, no tab dropdown, slightly transparent)
local Window = WindUI:CreateWindow({
    Title = "Walvy Community - Fish It",
    Icon = "rbxassetid://127851653377757",
    IconThemed = true,
    Author = "VERSION: VIP",
    Folder = "Walvy-Community",
    Size = UDim2.new(0, 380, 0, 260), -- ✅ Lebih kecil biar pas di Android
    Theme = "Dark" -- Bisa ganti "Light" kalau silau
})

-- Info Tab
local InfoTab = Window:Tab({ Title = "Info", Icon = "info" })

InfoTab:Paragraph({
    Title = "Welcome to Walvy Community",
    Desc = "Version Game: Fish it.",
    Image = "rbxassetid://121989361864413",
    ImageSize = 30,
    Thumbnail = "rbxassetid://85693098195372",
    ThumbnailSize = 170
})

InfoTab:Button({
    Title = "Join Our Discord",
    Desc = "Click to copy our Discord invite link.",
    Callback = function()
        setclipboard("https://discord.gg/kWC8Nn7kne")
        WindUI:Notify({
            Title = "Discord",
            Content = "Discord invite link copied to clipboard!",
            Duration = 5
        })
    end
})

-- Auto Farm Tab
local AutofarmTab = Window:Tab({ 
    Title = "Auto Farm", 
    Icon = "fish"
})

-- Toggle Fishing Radar
AutofarmTab:Toggle({
    Title = "Fishing Radar",
    Desc = "Bypass Fishing Radar",
    Default = false,
    Callback = function(state)
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Lighting = game:GetService("Lighting")

        local Replion = require(ReplicatedStorage.Packages.Replion)
        local Net = require(ReplicatedStorage.Packages.Net)
        local SPR = require(ReplicatedStorage.Packages.spr)
        local Soundbook = require(ReplicatedStorage.Shared.Soundbook)
        local ClientTime = require(ReplicatedStorage.Controllers.ClientTimeController)
        local TextNotification = require(ReplicatedStorage.Controllers.TextNotificationController)

        local UpdateFishingRadar = Net:RemoteFunction("UpdateFishingRadar")

        local function SetRadar(enable)
            local clientData = Replion.Client:GetReplion("Data")
            if not clientData then return end

            if clientData:Get("RegionsVisible") ~= enable then
                if UpdateFishingRadar:InvokeServer(enable) then
                    Soundbook.Sounds.RadarToggle:Play().PlaybackSpeed = 1 + math.random() * 0.3

                    -- Adjust lighting when enabling
                    if enable then
                        local ccEffect = Lighting:FindFirstChildWhichIsA("ColorCorrectionEffect")
                        if ccEffect then
                            SPR.stop(ccEffect)
                            local lightingProfile = ClientTime:_getLightingProfile()
                            local targetSettings = (lightingProfile and lightingProfile.ColorCorrection) or {}
                            targetSettings.Brightness = targetSettings.Brightness or 0.04
                            targetSettings.TintColor = targetSettings.TintColor or Color3.fromRGB(255, 255, 255)

                            ccEffect.TintColor = Color3.fromRGB(42, 226, 118)
                            ccEffect.Brightness = 0.4
                            SPR.target(ccEffect, 1, 1, targetSettings)
                        end

                        SPR.stop(Lighting)
                        Lighting.ExposureCompensation = 1
                        SPR.target(Lighting, 1, 2, {ExposureCompensation = 0})
                    end

                    -- Notification
                    TextNotification:DeliverNotification({
                        Type = "Text",
                        Text = "Radar: "..(enable and "Enabled" or "Disabled"),
                        TextColor = enable and {R = 9, G = 255, B = 0} or {R = 255, G = 0, B = 0}
                    })
                end
            end
        end

        -- Toggle ON/OFF
        if state then
            SetRadar(true)
        else
            SetRadar(false)
        end
    end
})

-- Paragraph with description
AutofarmTab:Paragraph({
    Title = "Auto Farm",
})

-- ===== Auto Fish Toggle =====
local autoFishEnabled = false
local delayTime = 3 -- Delay between fishing attempts

local autoFishToggle = AutofarmTab:Toggle({
    Title = "Auto Fish",
    Desc = "Automatically fish and instant fishing",
    Value = false,
    Callback = function(state)
        autoFishEnabled = state

        if state then
            WindUI:Notify({
                Title = "Auto Fish",
                Content = "Enabled",
                Duration = 3
            })

            task.spawn(function()
                while autoFishEnabled do
                    local success, err = pcall(function()
                        local ReplicatedStorage = game:GetService("ReplicatedStorage")
                        local EquipRod = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RE/EquipToolFromHotbar"]
                        local StartMinigame = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/RequestFishingMinigameStarted"]
                        local ChargeRod = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/ChargeFishingRod"]

                        -- Auto equip rod (slot 1)
                        EquipRod:FireServer(1)
                        task.wait(0.1)

                        -- Start mini game
                        StartMinigame:InvokeServer(-0.7499996423721313, 1)
                        task.wait(0.1)

                        -- Charge rod
                        ChargeRod:InvokeServer(workspace:GetServerTimeNow())
                        task.wait(0.1)

                        -- Request mini game again to ensure
                        StartMinigame:InvokeServer(-0.7499996423721313, 1)
                    end)

                    if not success then
                        warn("Auto Fish error:", err)
                    end

                    task.wait(delayTime)
                end
            end)
        else
            WindUI:Notify({
                Title = "Auto Fish",
                Content = "Disabled",
                Duration = 3
            })
        end
    end
})

-- ===== Auto Instant Fish Toggle =====
local autoInstantFishEnabled = false

local autoInstantFishToggle = AutofarmTab:Toggle({
    Title = "Auto Instant Fish",
    Desc = "Automatically completes fishing instantly",
    Value = false,
    Callback = function(state)
        autoInstantFishEnabled = state

        if state then
            WindUI:Notify({
                Title = "Auto Instant Fish",
                Content = "Enabled",
                Duration = 3
            })

            task.spawn(function()
                while autoInstantFishEnabled do
                    local success, err = pcall(function()
                        local ReplicatedStorage = game:GetService("ReplicatedStorage")
                        local REFishingCompleted = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RE/FishingCompleted"]
                        REFishingCompleted:FireServer()
                    end)
                    if not success then
                        warn("Auto Instant Fish error:", err)
                    end
                    task.wait(0.1)
                end
            end)
        else
            WindUI:Notify({
                Title = "Auto Instant Fish",
                Content = "Disabled",
                Duration = 3
            })
        end
    end
})

-- ===== Auto Sell Button =====
local sellAllButton = AutofarmTab:Button({
    Title = "Sell All Fish",
    Desc = "Click to sell all your items instantly",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local RFSellAllItems = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/SellAllItems"]

        pcall(function()
            RFSellAllItems:InvokeServer()
        end)

        WindUI:Notify({
            Title = "Auto Sell",
            Content = "All items sold!",
            Duration = 3
        })
    end
})

AutofarmTab:Paragraph({
    Title = "Anti Kicked From Server",
})

local antiKickToggle = AutofarmTab:Toggle({
    Title = "Anti Kick",
    Value = false,
    Callback = function(state)
        local player = game.Players.LocalPlayer

        if state then
            -- Ambil karakter & HumanoidRootPart
            local char = player.Character or player.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            local initialPos = hrp.Position
            local initialCFrame = hrp.CFrame -- simpan orientasi awal

            -- Anti-AFK VirtualUser
            _G.AntiKickConnection = player.Idled:Connect(function()
                local vu = game:GetService("VirtualUser")
                vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
                vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
            end)

            -- Auto Jump + pergerakan horizontal random
            _G.AutoJumpEnabled = true
            spawn(function()
                while _G.AutoJumpEnabled do
                    task.wait(5) -- interval 5 detik
                    local char = player.Character
                    if not char then break end
                    local humanoid = char:FindFirstChild("Humanoid")
                    local hrp = char:FindFirstChild("HumanoidRootPart")
                    if humanoid and humanoid.Health > 0 then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                    if hrp then
                        -- Pergerakan horizontal acak
                        local offsetX = math.random(-2,2)/10 -- ±0.2 studs
                        local offsetZ = math.random(-2,2)/10
                        local newPos = hrp.Position + Vector3.new(offsetX, 0, offsetZ)
                        hrp.CFrame = CFrame.lookAt(newPos, newPos + initialCFrame.LookVector)

                        task.wait(0.1)

                        -- Kembali ke posisi awal tetap menghadap depan
                        local currentY = hrp.Position.Y
                        hrp.CFrame = CFrame.lookAt(initialPos + Vector3.new(0, currentY - initialPos.Y, 0), 
                                                   initialPos + Vector3.new(0, currentY - initialPos.Y, 0) + initialCFrame.LookVector)
                    end
                end
            end)

            WindUI:Notify({
                Title = "Anti-Kick + Auto Jump",
                Content = "Enabled: Anti-Kick active with random horizontal movements",
                Duration = 3
            })
        else
            -- Matikan loop & disconnect Idled
            if _G.AntiKickConnection then
                _G.AntiKickConnection:Disconnect()
                _G.AntiKickConnection = nil
            end
            _G.AutoJumpEnabled = false

            WindUI:Notify({
                Title = "Anti-Kick + Auto Jump",
                Content = "Disabled",
                Duration = 3
            })
        end
    end
})

local AutoFarmTab = Window:Tab({
	Title = "Auto Farm Event",
	Icon = "leaf"
})

local floatPlatform = nil

local function floatingPlat(enabled)
	if enabled then
			local charFolder = workspace:WaitForChild("Characters", 5)
			local char = charFolder:FindFirstChild(LocalPlayer.Name)
			if not char then return end

			local hrp = char:FindFirstChild("HumanoidRootPart")
			if not hrp then return end

			floatPlatform = Instance.new("Part")
			floatPlatform.Anchored = true
			floatPlatform.Size = Vector3.new(10, 1, 10)
			floatPlatform.Transparency = 1
			floatPlatform.CanCollide = true
			floatPlatform.Name = "FloatPlatform"
			floatPlatform.Parent = workspace

			task.spawn(function()
				while floatPlatform and floatPlatform.Parent do
					pcall(function()
						floatPlatform.Position = hrp.Position - Vector3.new(0, 3.5, 0)
					end)
					task.wait(0.1)
				end
			end)

			NotifySuccess("Float Enabled", "This feature has been successfully activated!")
		else
			if floatPlatform then
				floatPlatform:Destroy()
				floatPlatform = nil
			end
			NotifyWarning("Float Disabled", "Feature disabled")
		end
end

  
local LocalPlayer = Players.LocalPlayer  
local workspace = game:GetService("Workspace")  
  
local knownEvents = {}

-- Mapping kode → nama event
local eventCodes = {
	["1"] = "Ghost Shark Hunt",
	["2"] = "Shark Hunt",
	["3"] = "Worm Hunt"
}

local function teleportTo(position)
	local char = workspace:FindFirstChild("Characters"):FindFirstChild(LocalPlayer.Name)
	if char then
		local hrp = char:FindFirstChild("HumanoidRootPart")
		if hrp then
			hrp.CFrame = CFrame.new(position + Vector3.new(0, 10, 0))
		end
	end
end

local function updateKnownEvents()
	knownEvents = {}

	local props = workspace:FindFirstChild("Props")
	if props then
		for _, child in ipairs(props:GetChildren()) do
			if child:IsA("Model") and child.PrimaryPart then
				knownEvents[child.Name:lower()] = child
			end
		end
	end
end

local function monitorEvents()
	local props = workspace:FindFirstChild("Props")
	if not props then
		workspace.ChildAdded:Connect(function(child)
			if child.Name == "Props" then
				task.wait(0.3)
				monitorEvents()
			end
		end)
		return
	end

	props.ChildAdded:Connect(function()
		task.wait(0.3)
		updateKnownEvents()
	end)

	props.ChildRemoved:Connect(function()
		task.wait(0.3)
		updateKnownEvents()
	end)

	updateKnownEvents()
end

monitorEvents()

local autoTPEvent = false
local savedCFrame = nil
local monitoringTP = false
local alreadyTeleported = false
local teleportTime = nil -- waktu saat teleport

local function saveOriginalPosition()
	local char = workspace:FindFirstChild("Characters"):FindFirstChild(LocalPlayer.Name)
	if char and char:FindFirstChild("HumanoidRootPart") then
		savedCFrame = char.HumanoidRootPart.CFrame
	end
end

local function returnToOriginalPosition()
	if savedCFrame then
		local char = workspace:FindFirstChild("Characters"):FindFirstChild(LocalPlayer.Name)
		if char and char:FindFirstChild("HumanoidRootPart") then
			char.HumanoidRootPart.CFrame = savedCFrame
		end
	end
end

local function monitorAutoTP()
	if monitoringTP then return end
	monitoringTP = true

	while true do
		if autoTPEvent then
			if next(knownEvents) ~= nil then
				for _, eventModel in pairs(knownEvents) do
					if not alreadyTeleported then
						saveOriginalPosition()
						teleportTo(eventModel:GetPivot().Position)
						if typeof(floatingPlat) == "function" then
							floatingPlat(true)
						end
						alreadyTeleported = true
						teleportTime = tick()
						NotifyError("Event Farm", "Teleported to: " .. eventModel.Name)
					end
					break
				end
			else
				-- Event hilang sebelum 15 menit
				if alreadyTeleported then
					returnToOriginalPosition()
					if typeof(floatingPlat) == "function" then
						floatingPlat(false)
					end
					alreadyTeleported = false
					teleportTime = nil
					NotifyInfo("Event Ended", "Returned to start position.")
				end
			end

			if alreadyTeleported and teleportTime and (tick() - teleportTime >= 900) then
				returnToOriginalPosition()
				if typeof(floatingPlat) == "function" then
					floatingPlat(false)
				end
				alreadyTeleported = false
				teleportTime = nil
				NotifyInfo("Event Timeout", "Returned after 15 minutes.")
			end
		else
			-- Jika toggle dimatikan, pastikan balik
			if alreadyTeleported then
				returnToOriginalPosition()
				if typeof(floatingPlat) == "function" then
					floatingPlat(false)
				end
				alreadyTeleported = false
				teleportTime = nil
			end
		end

		task.wait(1)
	end
end

task.spawn(monitorAutoTP)

local selectedIsland = "01"
local isAutoFarmRunning = false

local islandCodes = {
    ["01"] = "Crater Islands",
    ["02"] = "Tropical Grove",
    ["03"] = "Vulcano",
    ["04"] = "Coral Reefs",
    ["05"] = "Winter",
    ["06"] = "Machine",
    ["07"] = "Treasure Room",
    ["08"] = "Sisyphus Statue"
}

local farmLocations = {
    ["Crater Islands"] = {
    	CFrame.new(1066.1864, 57.2025681, 5045.5542, -0.682534158, 1.00865822e-08, 0.730853677, -5.8900711e-09, 1, -1.93017531e-08, -0.730853677, -1.74788859e-08, -0.682534158),
    	CFrame.new(1057.28992, 33.0884132, 5133.79883, 0.833871782, 5.44149223e-08, 0.551958203, -6.58184218e-09, 1, -8.86416984e-08, -0.551958203, 7.02829084e-08, 0.833871782),
    	CFrame.new(988.954712, 42.8254471, 5088.71289, -0.849417388, -9.89310394e-08, 0.527721584, -5.96115086e-08, 1, 9.15179328e-08, -0.527721584, 4.62786431e-08, -0.849417388),
    	CFrame.new(1006.70685, 17.2302666, 5092.14844, -0.989664078, 5.6538525e-09, -0.143405005, 9.14879283e-09, 1, -2.3711717e-08, 0.143405005, -2.47786183e-08, -0.989664078),
    	CFrame.new(1025.02356, 2.77259707, 5011.47021, -0.974474192, -6.87871804e-08, 0.224499553, -4.47472104e-08, 1, 1.12170284e-07, -0.224499553, 9.92613209e-08, -0.974474192),
    	CFrame.new(1071.14551, 3.528404, 5038.00293, -0.532300115, 3.38677708e-08, 0.84655571, 6.69992914e-08, 1, 2.12149165e-09, -0.84655571, 5.7847906e-08, -0.532300115),
    	CFrame.new(1022.55457, 16.6277809, 5066.28223, 0.721996129, 0, -0.691897094, 0, 1, 0, 0.691897094, 0, 0.721996129),
    },
    ["Tropical Grove"] = {
    	CFrame.new(-2165.05469, 2.77070165, 3639.87451, -0.589090407, -3.61497356e-08, -0.808067143, -3.20645626e-08, 1, -2.13606164e-08, 0.808067143, 1.3326984e-08, -0.589090407)
    },
    ["Vulcano"] = {
    	CFrame.new(-701.447937, 48.1446075, 93.1546631, -0.0770962164, 1.34335654e-08, -0.997023642, 9.84464776e-09, 1, 1.27124169e-08, 0.997023642, -8.83526763e-09, -0.0770962164),
    	CFrame.new(-654.994934, 57.2567711, 75.098526, -0.540957272, 2.58946509e-09, -0.841050088, -7.58775585e-08, 1, 5.18827363e-08, 0.841050088, 9.1883166e-08, -0.540957272),
    },
    ["Coral Reefs"] = {
    	CFrame.new(-3118.39624, 2.42531538, 2135.26392, 0.92336154, -1.0069185e-07, -0.383931547, 8.0607947e-08, 1, -6.84016968e-08, 0.383931547, 3.22115596e-08, 0.92336154),
    },
    ["Winter"] = {
    	CFrame.new(2036.15308, 6.54998732, 3381.88916, 0.943401575, 4.71338666e-08, -0.331652641, -3.28136842e-08, 1, 4.87781051e-08, 0.331652641, -3.51345975e-08, 0.943401575),
    },
    ["Machine"] = {
    	CFrame.new(-1459.3772, 14.7103214, 1831.5188, 0.777951121, 2.52131862e-08, -0.628324807, -5.24126378e-08, 1, -2.47663063e-08, 0.628324807, 5.21991339e-08, 0.777951121)
    },
    ["Treasure Room"] = {
    	CFrame.new(-3625.0708, -279.074219, -1594.57605, 0.918176472, -3.97606392e-09, -0.396171629, -1.12946204e-08, 1, -3.62128851e-08, 0.396171629, 3.77244298e-08, 0.918176472),
    	CFrame.new(-3600.72632, -276.06427, -1640.79663, -0.696130812, -6.0491181e-09, 0.717914939, -1.09490363e-08, 1, -2.19084972e-09, -0.717914939, -9.38559541e-09, -0.696130812),
    	CFrame.new(-3548.52222, -269.309845, -1659.26685, 0.0472991578, -4.08685423e-08, 0.998880744, -7.68598838e-08, 1, 4.45538149e-08, -0.998880744, -7.88812216e-08, 0.0472991578),
    	CFrame.new(-3581.84155, -279.09021, -1696.15637, -0.999634147, -0.000535600528, -0.0270430837, -0.000448358158, 0.999994695, -0.00323198596, 0.0270446707, -0.00321867829, -0.99962908),
    	CFrame.new(-3601.34302, -282.790955, -1629.37036, -0.526346684, 0.00143659476, 0.850268841, -0.000266355521, 0.999998271, -0.00185445137, -0.850269973, -0.00120255165, -0.526345372)
    },
    ["Sisyphus Statue"] = {
    	CFrame.new(-3722.92139, -101.130035, -955.649902, 0.777723014, -1.41385739e-08, 0.628607094, -2.57670365e-08, 1, 5.43713092e-08, -0.628607094, -5.84831632e-08, 0.777723014),
    	CFrame.new(-3708.47119, -97.2460022, -954.105835, 0.123319283, -4.95575279e-08, -0.992367029, 1.97065848e-08, 1, -4.7489813e-08, 0.992367029, -1.36997551e-08, 0.123319283),
    	CFrame.new(-3731.65234, -98.469101, -944.594482, -0.694187641, 2.44169023e-08, 0.719794095, -6.91526525e-09, 1, -4.05913241e-08, -0.719794095, -3.31555619e-08, -0.694187641)
    }
}

local function parseNumberWithDot(str)
    if typeof(str) ~= "string" or str == "" then return nil end
    local clean = str:gsub("%.", "")
    if clean == "" then return nil end
    return tonumber(clean)
end
      
local obtainedFishUUIDs = {}
local obtainedLimit = 30

local Remote = game:GetService("ReplicatedStorage").Packages._Index["sleitnick_net@0.2.0"].net["RE/ObtainedNewFishNotification"]
Remote.OnClientEvent:Connect(function(_, _, data)
    if data and data.InventoryItem and data.InventoryItem.UUID then
        table.insert(obtainedFishUUIDs, data.InventoryItem.UUID)
    end
end)

local function sellItems()
    if #obtainedFishUUIDs > 0 then
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index")
            :WaitForChild("sleitnick_net@0.2.0"):WaitForChild("net"):WaitForChild("RF/SellAllItems"):InvokeServer()
    end

    obtainedFishUUIDs = {}
end

local function startAutoFarmLoop()
    NotifySuccess("Auto Farm Enabled", "Fishing started on island: " .. selectedIsland)

    while isAutoFarmRunning do
        local islandSpots = farmLocations[selectedIsland]
        if type(islandSpots) == "table" and #islandSpots > 0 then
            location = islandSpots[math.random(1, #islandSpots)]
        else
            location = islandSpots
        end

        if not location then
            NotifyError("Invalid Island", "Selected island name not found.")
            return
        end

        local char = workspace:FindFirstChild("Characters"):FindFirstChild(LocalPlayer.Name)
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp then
            NotifyError("Teleport Failed", "HumanoidRootPart not found.")
            return
        end

        hrp.CFrame = location
        task.wait(1.5)

        StartAutoFish()

repeat
            if not isAutoFarmRunning then break end
            task.wait(0.3)
        until #obtainedFishUUIDs >= obtainedLimit

        if not isAutoFarmRunning then
            StopAutoFish()
            NotifyWarning("Auto Farm Stopped", "Auto Farm manually disabled. Auto Fish stopped.")
            break
        end

        StopAutoFish()
        NotifyInfo("Fish Threshold Reached", "Selling all fishes...")
        task.wait(1.5)

        local npcSellLocation = CFrame.new(-32, 5, 2885)
        if npcSellLocation then
            hrp.CFrame = npcSellLocation
            task.wait(1.25)
        end

        sellItems()
        task.wait(1.5)
    end
end      


local islandCodes = {
    ["01"] = "Crater Islands",
    ["02"] = "Tropical Grove",
    ["03"] = "Vulcano",
    ["04"] = "Coral Reefs",
    ["05"] = "Winter",
    ["06"] = "Machine",
    ["07"] = "Treasure Room",
    ["08"] = "Sisyphus Statue"
}

local nameList = {}
local islandNamesToCode = {}

for code, name in pairs(islandCodes) do
    table.insert(nameList, name)
    islandNamesToCode[name] = code
end

table.sort(nameList)

local CodeIsland = AutoFarmTab:Dropdown({
    Title = "Farm Island",
    Values = nameList,
    Value = nameList[1],
    Callback = function(selectedName)
        local code = islandNamesToCode[selectedName]
        local islandName = islandCodes[code]
        if islandName and farmLocations[islandName] then
            selectedIsland = islandName
            NotifySuccess("Island Selected", "Farming location set to " .. islandName)
        else
            NotifyError("Invalid Selection", "The island name is not recognized.")
        end
    end
})

myConfig:Register("IslCode", CodeIsland)

local FishThres = AutoFarmTab:Input({
	Title = "Fish Threshold",
	Placeholder = "Example: 1500",
	Value = nil,
	Callback = function(value)
		local number = tonumber(value)
		if number then
		  obtainedLimit = number
			NotifySuccess("Threshold Set", "Fish threshold set to " .. number)
		else
		  NotifyError("Invalid Input", "Failed to convert input to number.")
		end
	end,
})


myConfig:Register("FishThreshold", FishThres)

local AutoFarm = AutoFarmTab:Toggle({
	Title = "Start Auto Farm",
	Callback = function(state)
		isAutoFarmRunning = state
		if state then
			startAutoFarmLoop()
		else
			StopAutoFish()
		end
	end
})

myConfig:Register("AutoFarmStart", AutoFarm)

AutoFarmTab:Toggle({
	Title = "Auto Farm Event",
	Desc = "!! DO WITH YOUR OWN RISK !!",
	Value = false,
	Callback = function(state)
		autoTPEvent = state
		if autoTPEvent then
			monitorAutoTP()
		else
			if alreadyTeleported then
				returnToOriginalPosition()
				if typeof(floatingPlat) == "function" then
					floatingPlat(false)
				end
				alreadyTeleported = false
			end
		end
	end
})











local changestatsTab = Window:Tab({ 
    Title = "Change Rod Stats", 
    Icon = "file-text" 
})

-- ===== Paragraph =====
changestatsTab:Paragraph({
    Title="Rod Modifier",
    Desc="Select a Rod to apply max stats."
})

local rodDisplayOrder = {
    "Luck Rod",
    "Carbon Rod",
    "Grass Rod",
    "Demascus Rod",
    "Ice Rod",
    "Lucky Rod",
    "Midnight Rod",
    "Steampunk Rod",
    "Chrome Rod",
    "Astral Rod",
    "Ares Rod",
    "Angler Rod"
}

-- Mapping display name ke modul asli (dengan !!!)
local rodKeyMap = {
    ["Luck Rod"] = "!!! Luck Rod",
    ["Carbon Rod"] = "!!! Carbon Rod",
    ["Grass Rod"] = "!!! Grass Rod",
    ["Demascus Rod"] = "!!! Demascus Rod",
    ["Ice Rod"] = "!!! Ice Rod",
    ["Lucky Rod"] = "!!! Lucky Rod",
    ["Midnight Rod"] = "!!! Midnight Rod",
    ["Steampunk Rod"] = "!!! Steampunk Rod",
    ["Chrome Rod"] = "!!! Chrome Rod",
    ["Astral Rod"] = "!!! Astral Rod",
    ["Ares Rod"] = "!!! Ares Rod",
    ["Angler Rod"] = "!!! Angler Rod"
}

-- Selected default
local selectedRod = rodDisplayOrder[1]

-- ===== Dropdown =====
changestatsTab:Dropdown({
    Title = "Select Rod",
    Values = rodDisplayOrder,
    Value = selectedRod,
    Callback = function(value)
        selectedRod = value
        WindUI:Notify({
            Title = "Rod Selected",
            Content = value,
            Duration = 3
        })
    end
})

-- ===== Tombol Apply Max Stats =====
changestatsTab:Button({
    Title = "Apply Max Stats",
    Callback = function()
        local moduleName = rodKeyMap[selectedRod] -- modul asli dengan !!!
        if moduleName then
            local success, err = pcall(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local rodModule = ReplicatedStorage.Items:FindFirstChild(moduleName)
                
                if rodModule and rodModule:IsA("ModuleScript") then
                    local rodData = require(rodModule)
                    
                    rodData.VisualClickPowerPercent = 999999
                    rodData.ClickPower = 999999
                    rodData.Resilience = 999999
                    rodData.Windup = NumberRange.new(0.01,0.01)
                    rodData.MaxWeight = 999999

                    if rodData.RollData then
                        rodData.RollData.BaseLuck = 999999
                        if rodData.RollData.Frequency then
                            rodData.RollData.Frequency.Golden = 999999
                            rodData.RollData.Frequency.Rainbow = 999999
                        end
                    end
                else
                    warn("Module "..moduleName.." tidak ditemukan!")
                end
            end)

            if success then
                WindUI:Notify({
                    Title = "Rod Modifier",
                    Content = selectedRod.." max stats applied!",
                    Duration = 3
                })
            else
                WindUI:Notify({
                    Title = "Rod Modifier Error",
                    Content = tostring(err),
                    Duration = 5
                })
            end
        end
    end
})

-- Teleport Tab
local TpTab = Window:Tab({  
    Title = "Teleport",  
    Icon = "map-pin"
})

-- Daftar lokasi teleport
local teleportLocations = {
    {Title = "Kohana Lava", Position = Vector3.new(-593.32, 59.0, 130.82)},
    {Title = "Esotoric Island", Position = Vector3.new(2024.490, 27.397, 1391.620)},
    {Title = "Kohana", Position = Vector3.new(-630.300, 16.035, 597.480)},
    {Title = "Lost Isle", Position = Vector3.new(-3660.070, 5.426, -1053.020)},
    {Title = "Stingray Shores", Position = Vector3.new(45.280, 28.000, 2987.110)},
    {Title = "Tropical Grove", Position = Vector3.new(-2092.897, 6.268, 3693.929)},
    {Title = "Weather Machine", Position = Vector3.new(-1495.250, 6.500, 1889.920)},
    {Title = "Coral Reefs", Position = Vector3.new(-2949.359, 63.250, 2213.966)},
    {Title = "Crater Island", Position = Vector3.new(1012.045, 22.676, 5080.221)},
    {Title = "Teleport To Enchant", Position = Vector3.new(3236.120, -1302.855, 1399.491)}
}

-- Buat list nama untuk dropdown
local locationNames = {}
for _, loc in ipairs(teleportLocations) do
    table.insert(locationNames, loc.Title)
end

-- Default selected location
local selectedLocation = locationNames[1]

-- Paragraph
TpTab:Paragraph({
    Title = "Teleport To Island",
    Desc = "Select a location and press Teleport."
})

-- Dropdown Teleport
local teleportDropdown = TpTab:Dropdown({
    Title = "Select Location",
    Values = locationNames,
    Value = selectedLocation,
    Callback = function(value)
        selectedLocation = value
        WindUI:Notify({Title="Location Selected", Content=value, Duration=3})
    end
})

-- Tombol Teleport
TpTab:Button({
    Title = "Teleport To Island",
    Icon = "rbxassetid://85151307796718",
    Callback = function()
        if selectedLocation then
            local loc
            for _, l in ipairs(teleportLocations) do
                if l.Title == selectedLocation then
                    loc = l
                    break
                end
            end

            if loc then
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local hrp = character:WaitForChild("HumanoidRootPart")
                hrp.CFrame = CFrame.new(loc.Position)
                WindUI:Notify({Title="Teleported", Content="Teleported to "..loc.Title, Duration=3})
            end
        end
    end
})

-- Toggle Diving Gear ON/OFF
TpTab:Toggle({
    Title = "Diving Gear",
    Desc = "Using diving gear without buying it",
    Default = false,
    Callback = function(state)
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Replion = require(ReplicatedStorage.Packages.Replion)
        local Net = require(ReplicatedStorage.Packages.Net)
        local ItemUtility = require(ReplicatedStorage.Shared.ItemUtility)
        local Soundbook = require(ReplicatedStorage.Shared.Soundbook)
        local NotificationController = require(ReplicatedStorage.Controllers.TextNotificationController)

        local DivingGear = ItemUtility:GetItemData("Diving Gear")
        if not DivingGear then return end

        local ReplionData = Replion.Client:GetReplion("Data")

        if state then
            -- ON
            if ReplionData:Get("EquippedOxygenTankId") ~= DivingGear.Data.Id then
                local EquipFunc = Net:RemoteFunction("EquipOxygenTank")
                local success = EquipFunc:InvokeServer(DivingGear.Data.Id)
                if success then
                    Soundbook.Sounds.DivingToggle:Play().PlaybackSpeed = 1 + math.random() * 0.3
                    NotificationController:DeliverNotification({
                        Type = "Text",
                        Text = "Diving Gear: On",
                        TextColor = {R = 9, G = 255, B = 0}
                    })
                end
            end
        else
            -- OFF
            if ReplionData:Get("EquippedOxygenTankId") == DivingGear.Data.Id then
                local UnequipFunc = Net:RemoteFunction("UnequipOxygenTank")
                local success = UnequipFunc:InvokeServer()
                if success then
                    Soundbook.Sounds.DivingToggle:Play().PlaybackSpeed = 1 + math.random() * 0.3
                    NotificationController:DeliverNotification({
                        Type = "Text",
                        Text = "Diving Gear: Off",
                        TextColor = {R = 255, G = 0, B = 0}
                    })
                end
            end
        end
    end
})

TpTab:Paragraph({
    Title = "Teleport To Other Player",
    Desc = "Select Name Player And Press Teleport"
})

-- Teleport to Player Tab
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local selectedPlayer = nil
local playerDropdown = nil -- reference dropdown

-- Fungsi refresh dropdown
local function refreshPlayerDropdown()
    -- Hapus dropdown lama jika ada
    if playerDropdown then
        playerDropdown:Remove()
    end

    -- Buat daftar player baru
    local playerNames = {}
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            table.insert(playerNames, plr.Name)
        end
    end

    -- Default selected player
    if #playerNames > 0 then
        if not table.find(playerNames, selectedPlayer) then
            selectedPlayer = playerNames[1]
        end
    else
        selectedPlayer = nil
    end

    -- Buat dropdown baru
    playerDropdown = TpTab:Dropdown({
        Title = "Select Player",
        Values = playerNames,
        Value = selectedPlayer,
        Callback = function(value)
            selectedPlayer = value
            WindUI:Notify({Title="Player Selected", Content=value, Duration=3})
        end
    })
end

-- Buat dropdown pertama kali sebelum tombol
refreshPlayerDropdown()

-- Tombol Teleport di bawah dropdown
TpTab:Button({
    Title = "Telepor To Other Player",
    Callback = function()
        if selectedPlayer then
            local targetPlayer = Players:FindFirstChild(selectedPlayer)
            local myChar = LocalPlayer.Character
            local hrp = myChar and myChar:FindFirstChild("HumanoidRootPart")
            local targetChar = targetPlayer and targetPlayer.Character
            local targetHRP = targetChar and targetChar:FindFirstChild("HumanoidRootPart")

            if hrp and targetHRP then
                hrp.CFrame = targetHRP.CFrame + Vector3.new(0,5,0)
                WindUI:Notify({Title="Teleported", Content="Teleported to "..selectedPlayer, Duration=3})
            end
        end
    end
})

-- Loop refresh dropdown tiap detik (tombol tetap di bawah)
spawn(function()
    while true do
        wait(1)
        refreshPlayerDropdown()
    end
end)

TpTab:Paragraph({
    Title = "Saved & Load, Location",
    Desc = "Saved Potition And Load Potition"
})

-- ===== Load Config =====
local savedConfig
if Window.ConfigManager then
    savedConfig = Window.ConfigManager:CreateConfig("Walvy Community"):Load()
end

-- ===== Default Values =====
local defaultTheme = (savedConfig and savedConfig.Theme) or WindUI:GetCurrentTheme()
local defaultTransparency = (savedConfig and savedConfig.TransparentMode ~= nil) and savedConfig.TransparentMode or true

-- ===== Saved Position =====
local savedPosition
if savedConfig and savedConfig.SavedPosition then
    local pos = savedConfig.SavedPosition
    if pos.X and pos.Y and pos.Z then
        savedPosition = Vector3.new(pos.X, pos.Y, pos.Z)
    end
end

-- Tombol Save Position
TpTab:Button({
    Title = "Save Position",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        savedPosition = hrp.Position

        -- Simpan ke Config
        if Window.ConfigManager then
            local config = Window.ConfigManager:CreateConfig("Walvy Community")
            config:Set("SavedPosition", {X = savedPosition.X, Y = savedPosition.Y, Z = savedPosition.Z})
            config:Save()
        end

        WindUI:Notify({Title="Position Saved", Content=tostring(savedPosition), Duration=3})
    end
})

-- Tombol Load Saved Position (hanya jalan kalau ditekan)
TpTab:Button({
    Title = "Load Saved Position",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")

        if savedPosition then
            hrp.CFrame = CFrame.new(savedPosition)
            WindUI:Notify({Title="Loaded Saved Position", Content=tostring(savedPosition), Duration=3})
        else
            WindUI:Notify({Title="Info", Content="No saved position found, please save first.", Duration=3})
        end
    end
})

-- Spawn Boat Tab
local SpawnBoatTab = Window:Tab({  
    Title = "Spawn Boat",  
    Icon = "ship"
})

-- Boat Types
local boatTypes = {
    {Title = "Small Boat", Id = 1},
    {Title = "Kayak", Id = 2},
    {Title = "Jetski", Id = 3},
    {Title = "Highfield", Id = 4},
    {Title = "Speed Boat", Id = 5},
    {Title = "Fishing Boat", Id = 6},
    {Title = "Mini Yacht", Id = 14},
    {Title = "Hyper Boat", Id = 7},
    {Title = "Frozen Boat", Id = 11},
    {Title = "Cruiser Boat", Id = 13}
}

-- Buat list nama untuk dropdown
local boatNames = {}
for _, boat in ipairs(boatTypes) do
    table.insert(boatNames, boat.Title)
end

-- Default selected boat
local selectedBoat = boatNames[1]

-- Paragraph
SpawnBoatTab:Paragraph({
    Title = "Set All Boat Speed 1000",
})

-- Toggle
SpawnBoatTab:Toggle({
    Title = "Super Speed Boats",
    Default = false,
    Callback = function(state)
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local BoatsModule = require(ReplicatedStorage.Shared.BoatsHandlingData)

        -- Simpan Speed asli untuk restore
        if not BoatsModule._OriginalSpeed then
            BoatsModule._OriginalSpeed = {}
            for boatName, boatData in pairs(BoatsModule) do
                BoatsModule._OriginalSpeed[boatName] = boatData.Speed
            end
        end

        if state then
            -- ON: Set semua boat Speed = 1000
            for _, boatData in pairs(BoatsModule) do
                boatData.Speed = 1000
            end
        else
            -- OFF: Restore Speed asli
            for boatName, boatData in pairs(BoatsModule) do
                if BoatsModule._OriginalSpeed[boatName] then
                    boatData.Speed = BoatsModule._OriginalSpeed[boatName]
                end
            end
        end
    end
})

-- Paragraph
SpawnBoatTab:Paragraph({
    Title = "Spawn Boats",
    Desc = "Select a boat from dropdown and press Spawn."
})

-- Dropdown Boat
SpawnBoatTab:Dropdown({
    Title = "Select Boat",
    Values = boatNames,
    Value = selectedBoat,
    Callback = function(value)
        selectedBoat = value
        WindUI:Notify({Title="Boat Selected", Content=value, Duration=3})
    end
})

-- Tombol Spawn
SpawnBoatTab:Button({
    Title = "Spawn Boat",
    Icon = "ship",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local RFSpawnBoat = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/SpawnBoat"]
        if RFSpawnBoat then
            -- Cari ID boat yang sesuai nama
            local boatId
            for _, boat in ipairs(boatTypes) do
                if boat.Title == selectedBoat then
                    boatId = boat.Id
                    break
                end
            end

            if boatId then
                local success, err = pcall(function()
                    RFSpawnBoat:InvokeServer(boatId)
                end)
                if success then
                    WindUI:Notify({Title="Boat Spawned", Content=selectedBoat, Duration=3})
                else
                    WindUI:Notify({Title="Spawn Error", Content=tostring(err), Duration=5})
                end
            else
                WindUI:Notify({Title="Spawn Error", Content="Boat ID not found!", Duration=5})
            end
        end
    end
})

-- Buy Rod Tab
local BuyRodTab = Window:Tab({  
    Title = "Shop",  
    Icon = "shopping-cart"
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RFPurchaseFishingRod = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseFishingRod"]
local RFPurchaseBait = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseBait"]
local RFPurchaseWeatherEvent = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseWeatherEvent"]
local RFPurchaseBoat = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseBoat"]

-- ===== Rod Data =====
local rods = {
    ["Luck Rod"] = 79,
    ["Carbon Rod"] = 76,
    ["Grass Rod"] = 85,
    ["Demascus Rod"] = 77,
    ["Ice Rod"] = 78,
    ["Lucky Rod"] = 4,
    ["Midnight Rod"] = 80,
    ["Steampunk Rod"] = 6,
    ["Chrome Rod"] = 7,
    ["Astral Rod"] = 5,
    ["Ares Rod"] = 126,
    ["Angler Rod"] = 168
}

-- Dropdown display names (nama + harga)
local rodNames = {
    "Luck Rod ($350)", "Carbon Rod ($900)", "Grass Rod ($1.5k)", "Demascus Rod ($3k)",
    "Ice Rod ($5k)", "Lucky Rod ($15k)", "Midnight Rod ($50k)", "Steampunk Rod ($215k)",
    "Chrome Rod ($437k)", "Astral Rod ($1M)", "Ares Rod ($3M)", "Angler Rod ($8M)"
}

-- Mapping dari display name ke key asli
local rodKeyMap = {
    ["Luck Rod ($350)"]="Luck Rod",
    ["Carbon Rod ($900)"]="Carbon Rod",
    ["Grass Rod ($1.5k)"]="Grass Rod",
    ["Demascus Rod ($3k)"]="Demascus Rod",
    ["Ice Rod ($5k)"]="Ice Rod",
    ["Lucky Rod ($15k)"]="Lucky Rod",
    ["Midnight Rod ($50k)"]="Midnight Rod",
    ["Steampunk Rod ($215k)"]="Steampunk Rod",
    ["Chrome Rod ($437k)"]="Chrome Rod",
    ["Astral Rod ($1M)"]="Astral Rod",
    ["Ares Rod ($3M)"]="Ares Rod",
    ["Angler Rod ($8M)"]="Angler Rod"
}

local selectedRod = rodNames[1]

-- ===== Dropdown =====
BuyRodTab:Dropdown({
    Title = "Select Rod",
    Values = rodNames,
    Value = selectedRod,
    Callback = function(value)
        selectedRod = value
        WindUI:Notify({Title="Rod Selected", Content=value, Duration=3})
    end
})

-- ===== Tombol Buy Rod =====
BuyRodTab:Button({
    Title="Buy Rod",
    Callback=function()
        local key = rodKeyMap[selectedRod] -- ambil key asli
        if key and rods[key] then
            local success, err = pcall(function()
                RFPurchaseFishingRod:InvokeServer(rods[key])
            end)
            if success then
                WindUI:Notify({Title="Rod Purchase", Content="Purchased "..selectedRod, Duration=3})
            else
                WindUI:Notify({Title="Rod Purchase Error", Content=tostring(err), Duration=5})
            end
        end
    end
})

-- ===== Bait Data =====
local baits = {
    ["TopWater Bait"] = 10,
    ["Lucky Bait"] = 2,
    ["Midnight Bait"] = 3,
    ["Chroma Bait"] = 6,
    ["Dark Mater Bait"] = 8,
    ["Corrupt Bait"] = 15,
    ["Aether Bait"] = 16
}

-- Dropdown display names (nama + harga)
local baitNames = {
    "TopWater Bait ($100)",
    "Lucky Bait ($1k)",
    "Midnight Bait ($3k)",
    "Chroma Bait ($290k)",
    "Dark Mater Bait ($630k)",
    "Corrupt Bait ($1.15M)",
    "Aether Bait ($3.7M)"
}

-- Mapping display name -> key asli
local baitKeyMap = {
    ["TopWater Bait ($100)"] = "TopWater Bait",
    ["Lucky Bait ($1k)"] = "Lucky Bait",
    ["Midnight Bait ($3k)"] = "Midnight Bait",
    ["Chroma Bait ($290k)"] = "Chroma Bait",
    ["Dark Mater Bait ($630k)"] = "Dark Mater Bait",
    ["Corrupt Bait ($1.15M)"] = "Corrupt Bait",
    ["Aether Bait ($3.7M)"] = "Aether Bait"
}

local selectedBait = baitNames[1]

-- ===== Paragraph =====
BuyRodTab:Paragraph({
    Title = "Buy Bait",
    Desc = "Select a bait to purchase."
})

-- ===== Dropdown =====
BuyRodTab:Dropdown({
    Title="Select Bait",
    Values=baitNames,
    Value=selectedBait,
    Callback=function(value)
        selectedBait = value
        WindUI:Notify({
            Title="Bait Selected",
            Content=value,
            Duration=3
        })
    end
})

-- ===== Tombol Buy Bait =====
BuyRodTab:Button({
    Title="Buy Bait",
    Callback=function()
        local key = baitKeyMap[selectedBait] -- ambil key asli
        if key and baits[key] then
            local amount = baits[key]
            local success, err = pcall(function()
                RFPurchaseBait:InvokeServer(amount)
            end)
            if success then
                WindUI:Notify({
                    Title="Bait Purchase",
                    Content="Purchased "..selectedBait.." x"..amount,
                    Duration=3
                })
            else
                WindUI:Notify({
                    Title="Bait Purchase Error",
                    Content=tostring(err),
                    Duration=5
                })
            end
        end
    end
})

-- ===== Weather Data =====
local weathers = {
    ["Wind"] = 10000,
    ["Snow"] = 20000,
    ["Cloudy"] = 15000,
    ["Storm"] = 35000,
    ["Radiant"] = 50000,
    ["Shark Hunt"] = 300000
}

-- Dropdown display names (nama + harga)
local weatherNames = {
    "Wind ($10k)", "Snow ($20k)", "Cloudy ($15k)", "Storm ($35k)",
    "Radiant ($50k)", "Shark Hunt ($300k)"
}

-- Mapping display name -> key asli
local weatherKeyMap = {
    ["Wind ($10k)"] = "Wind",
    ["Snow ($20k)"] = "Snow",
    ["Cloudy ($15k)"] = "Cloudy",
    ["Storm ($35k)"] = "Storm",
    ["Radiant ($50k)"] = "Radiant",
    ["Shark Hunt ($300k)"] = "Shark Hunt"
}

local selectedWeather = weatherNames[1]

-- ===== Paragraph =====
BuyRodTab:Paragraph({
    Title="Buy Weather",
    Desc="Select a weather to purchase."
})

-- ===== Dropdown =====
BuyRodTab:Dropdown({
    Title="Select Weather",
    Values=weatherNames,
    Value=selectedWeather,
    Callback=function(value)
        selectedWeather = value
        local price = weathers[weatherKeyMap[value]]
        WindUI:Notify({
            Title="Weather Selected",
            Content=value,
            Duration=3
        })
    end
})

-- ===== Tombol Buy Weather =====
BuyRodTab:Button({
    Title="Buy Weather",
    Callback=function()
        local key = weatherKeyMap[selectedWeather] -- ambil key asli
        if key and weathers[key] then
            local price = weathers[key]
            local success, err = pcall(function()
                RFPurchaseWeatherEvent:InvokeServer(key)
            end)
            if success then
                WindUI:Notify({
                    Title="Weather Purchase",
                    Content="Purchased "..selectedWeather,
                    Duration=3
                })
            else
                WindUI:Notify({
                    Title="Weather Purchase Error",
                    Content=tostring(err),
                    Duration=5
                })
            end
        end
    end
})

-- ===== Paragraph =====
BuyRodTab:Paragraph({
    Title="Buy Boat",
    Desc="Select a Boat to purchase."
})

-- Urutan boat
local boatOrder = {
    "Small Boat",
    "Kayak",
    "Jetski",
    "Highfield",
    "Speed Boat",
    "Fishing Boat",
    "Mini Yacht",
    "Hyper Boat",
    "Frozen Boat",
    "Cruiser Boat"
}

-- Data boat
local boats = {
    ["Small Boat"] = {Id = 1, Price = 300},
    ["Kayak"] = {Id = 2, Price = 1100},
    ["Jetski"] = {Id = 3, Price = 7500},
    ["Highfield"] = {Id = 4, Price = 25000},
    ["Speed Boat"] = {Id = 5, Price = 70000},
    ["Fishing Boat"] = {Id = 6, Price = 180000},
    ["Mini Yacht"] = {Id = 14, Price = 1200000},
    ["Hyper Boat"] = {Id = 7, Price = 999000},
    ["Frozen Boat"] = {Id = 11, Price = 0},
    ["Cruiser Boat"] = {Id = 13, Price = 0}
}

-- Buat display names sesuai urutan
local boatNames = {}
for _, name in ipairs(boatOrder) do
    local data = boats[name]
    local priceStr
    if data.Price >= 1000000 then
        priceStr = string.format("$%.2fM", data.Price/1000000)
    elseif data.Price >= 1000 then
        priceStr = string.format("$%.0fk", data.Price/1000)
    else
        priceStr = "$"..data.Price
    end
    table.insert(boatNames, name.." ("..priceStr..")")
end

-- Buat keyMap sesuai urutan
local boatKeyMap = {}
for _, displayName in ipairs(boatNames) do
    local nameOnly = displayName:match("^(.-) %(") -- ambil nama sebelum tanda '('
    boatKeyMap[displayName] = nameOnly
end

-- Selected default
local selectedBoat = boatNames[1]

-- ===== Paragraph =====
BuyRodTab:Paragraph({
    Title="Buy Boat",
    Desc="Select a Boat to purchase."
})

-- ===== Dropdown =====
BuyRodTab:Dropdown({
    Title = "Select Boat",
    Values = boatNames,
    Value = selectedBoat,
    Callback = function(value)
        selectedBoat = value
        WindUI:Notify({
            Title = "Boat Selected",
            Content = value,
            Duration = 3
        })
    end
})

-- ===== Tombol Buy Boat =====
BuyRodTab:Button({
    Title = "Buy Boat",
    Callback = function()
        local key = boatKeyMap[selectedBoat]
        if key and boats[key] then
            local success, err = pcall(function()
                RFPurchaseBoat:InvokeServer(boats[key].Id)
            end)
            if success then
                WindUI:Notify({
                    Title = "Boat Purchase",
                    Content = "Purchased "..selectedBoat,
                    Duration = 3
                })
            else
                WindUI:Notify({
                    Title = "Boat Purchase Error",
                    Content = tostring(err),
                    Duration = 5
                })
            end
        end
    end
})

local karakterTab = Window:Tab({  
    Title = "User",  
    Icon = "user-plus"
})

karakterTab:Paragraph({
    Title = "Change Ability Your Character",
})

-- ===== Speed Hack Slider =====
karakterTab:Slider({
    Title = "Speed Hack",
    Value = {
        Min = 18,
        Max = 200,
        Default = 18
    },
    Callback = function(value)
        local player = game.Players.LocalPlayer
        local char = player.Character or player.CharacterAdded:Wait()
        local humanoid = char:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = value
        end
        WindUI:Notify({
            Title = "Speed Hack",
            Content = "WalkSpeed set to "..value,
            Duration = 2
        })
    end
})

karakterTab:Button({
    Title = "Reset SpeedHack",
    Desc = "Kembalikan ke kecepatan normal",
    Callback = function()
        local player = game.Players.LocalPlayer
        local char = player.Character or player.CharacterAdded:Wait()
        local humanoid = char:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 18
        end
        WindUI:Notify({
            Title = "SpeedHack Reset",
            Content = "WalkSpeed dikembalikan ke normal (18)",
            Duration = 2
        })
    end
})

-- ===== Infinity Jump Toggle (Android-friendly) =====
-- ===== Infinity Jump Toggle (Android Friendly) =====
local infinityJumpToggle = karakterTab:Toggle({
    Title = "Infinity Jump",
    Desc = "Allows you to jump infinitely on Android while tapping screen.",
    Value = false,
    Callback = function(state)
        _G.InfinityJumpEnabled = state

        local UserInputService = game:GetService("UserInputService")

        if state then
            -- Connect touch input for Android
            _G.InfinityJumpConnection = UserInputService.TouchStarted:Connect(function(touch, gameProcessed)
                if gameProcessed then return end
                local player = game.Players.LocalPlayer
                local char = player.Character or player.CharacterAdded:Wait()
                local humanoid = char:FindFirstChild("Humanoid")
                if humanoid and humanoid.Health > 0 then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end)

            WindUI:Notify({
                Title = "Infinity Jump",
                Content = "Enabled",
                Duration = 3
            })
        else
            if _G.InfinityJumpConnection then
                _G.InfinityJumpConnection:Disconnect()
                _G.InfinityJumpConnection = nil
            end
            WindUI:Notify({
                Title = "Infinity Jump",
                Content = "Disabled",
                Duration = 3
            })
        end
    end
})

-- ===== Noclip Toggle =====
local noclipEnabled = false
karakterTab:Toggle({
    Title = "Noclip",
    Desc = "Bisa menembus objek",
    Value = false,
    Callback = function(state)
        noclipEnabled = state
        local player = game.Players.LocalPlayer
        local char = player.Character or player.CharacterAdded:Wait()

        if state then
            _G.NoclipConnection = game:GetService("RunService").RenderStepped:Connect(function()
                if char then
                    for _, part in ipairs(char:GetChildren()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
            WindUI:Notify({Title="Noclip", Content="Enabled", Duration=2})
        else
            if _G.NoclipConnection then
                _G.NoclipConnection:Disconnect()
                _G.NoclipConnection = nil
            end
            if char then
                for _, part in ipairs(char:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
            WindUI:Notify({Title="Noclip", Content="Disabled", Duration=2})
        end
    end
})


local walkOnWaterEnabled = false
local floatHeight = 3
local player = game.Players.LocalPlayer
local runService = game:GetService("RunService")

-- Simpan reference BodyPosition & connection
local bp, floatConnection

local function setupFloat()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart")

    -- BodyPosition untuk mengatur posisi Y
    bp = Instance.new("BodyPosition")
    bp.MaxForce = Vector3.new(0, math.huge, 0)
    bp.D = 15
    bp.P = 2000
    bp.Position = hrp.Position
    bp.Parent = hrp

    -- Loop RenderStepped untuk update posisi
    floatConnection = runService.RenderStepped:Connect(function(delta)
        if walkOnWaterEnabled and hrp and hrp.Parent then
            local ray = Ray.new(hrp.Position, Vector3.new(0, -50, 0))
            local part, pos = workspace:FindPartOnRay(ray, char)
            if part and (part.Material == Enum.Material.Water or part.Name:lower():find("lava")) then
                bp.Position = Vector3.new(hrp.Position.X, pos.Y + floatHeight, hrp.Position.Z)
            else
                -- Kalau bukan air/lava, biarkan jatuh normal
                bp.Position = hrp.Position
            end
        end
    end)
end

-- Toggle di karakterTab
karakterTab:Toggle({
    Title = "Fly Little",
    Desc = "Raise your character a little and make your character float",
    Value = false,
    Callback = function(state)
        walkOnWaterEnabled = state
        local char = player.Character or player.CharacterAdded:Wait()
        local hrp = char:WaitForChild("HumanoidRootPart")

        if state then
            setupFloat()
            WindUI:Notify({Title="Walk On Water", Content="Enabled", Duration=2})
        else
            if floatConnection then
                floatConnection:Disconnect()
                floatConnection = nil
            end
            if bp then
                bp:Destroy()
                bp = nil
            end
            WindUI:Notify({Title="Walk On Water", Content="Disabled", Duration=2})
        end
    end
})

karakterTab:Paragraph({
    Title = "Visual / ESP",
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Folder untuk ESP
local ESPFolder = Instance.new("Folder")
ESPFolder.Name = "PlayerESP"
ESPFolder.Parent = CoreGui

local playerESPEnabled = false

-- Fungsi membuat ESP (hanya dipanggil saat toggle ON)
local function CreatePlayerESP(player)
    if player == LocalPlayer or ESPFolder:FindFirstChild(player.Name) then return end
    local character = player.Character
    if not character then return end
    local head = character:FindFirstChild("Head")
    if not head then return end

    local container = Instance.new("Folder")
    container.Name = player.Name
    container.Parent = ESPFolder

    -- Highlight biru
    local highlight = Instance.new("Highlight")
    highlight.Adornee = character
    highlight.FillTransparency = 1
    highlight.OutlineColor = Color3.fromRGB(0, 170, 255) -- BIRU
    highlight.OutlineTransparency = 0
    highlight.Parent = container

    -- NameTag
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "NameTag"
    billboard.Adornee = head
    billboard.Size = UDim2.new(0, 100, 0, 20)
    billboard.StudsOffset = Vector3.new(0, 2.5, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = container

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 1, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = player.Name
    nameLabel.TextColor3 = Color3.new(1, 1, 1) -- Putih
    nameLabel.TextStrokeTransparency = 0
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.TextScaled = true
    nameLabel.Parent = billboard
end

-- Hapus semua ESP
local function ClearESP()
    ESPFolder:ClearAllChildren()
end

-- Mulai ESP loop
local connection
local function StartESP()
    if connection then return end
    connection = RunService.Heartbeat:Connect(function()
        if playerESPEnabled then
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character then
                    if not ESPFolder:FindFirstChild(player.Name) then
                        CreatePlayerESP(player)
                    end
                end
            end
        else
            ClearESP()
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end)
end

-- Toggle GUI
karakterTab:Toggle({
    Title = "Player ESP",
    Desc = "Show ESP for Other Players with Blue Outline and White NameTag",
    Value = false,
    Callback = function(state)
        playerESPEnabled = state
        if state then
            StartESP()
        else
            ClearESP()
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end
})

-- Hapus ESP saat pemain keluar
Players.PlayerRemoving:Connect(function(player)
    local esp = ESPFolder:FindFirstChild(player.Name)
    if esp then esp:Destroy() end
end)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Folder untuk ESP
local ESPFolder = Instance.new("Folder")
ESPFolder.Name = "PlayerESP"
ESPFolder.Parent = CoreGui

local playerESPEnabled = false
local hue = 0

-- Fungsi membuat ESP
local function CreatePlayerESP(player)
    if player == LocalPlayer or ESPFolder:FindFirstChild(player.Name) then return end
    local character = player.Character
    if not character then return end
    local head = character:FindFirstChild("Head")
    if not head then return end

    local container = Instance.new("Folder")
    container.Name = player.Name
    container.Parent = ESPFolder

    -- Highlight rainbow
    local highlight = Instance.new("Highlight")
    highlight.Adornee = character
    highlight.FillTransparency = 1
    highlight.OutlineColor = Color3.fromHSV(hue/360, 1, 1)
    highlight.OutlineTransparency = 0
    highlight.Parent = container

    -- NameTag
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "NameTag"
    billboard.Adornee = head
    billboard.Size = UDim2.new(0, 100, 0, 20)
    billboard.StudsOffset = Vector3.new(0, 2.5, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = container

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 1, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = player.Name
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.TextStrokeTransparency = 0
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.TextScaled = true
    nameLabel.Parent = billboard
end

-- Update warna ESP (rainbow)
local function UpdateESPColors()
    hue = (hue + 5) % 360
    for _, container in pairs(ESPFolder:GetChildren()) do
        local highlight = container:FindFirstChildWhichIsA("Highlight")
        if highlight then
            highlight.OutlineColor = Color3.fromHSV(hue/360, 1, 1)
        end
    end
end

-- Hapus semua ESP
local function ClearESP()
    ESPFolder:ClearAllChildren()
end

-- Mulai ESP loop
local connection
local function StartESP()
    if connection then return end
    connection = RunService.Heartbeat:Connect(function()
        if playerESPEnabled then
            UpdateESPColors()
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character then
                    if not ESPFolder:FindFirstChild(player.Name) then
                        CreatePlayerESP(player)
                    end
                end
            end
        else
            ClearESP()
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end)
end

-- Toggle GUI
karakterTab:Toggle({
    Title = "Player ESP",
    Desc = "Show ESP for Other Players with Rainbow Outline and White NameTag",
    Value = false,
    Callback = function(state)
        playerESPEnabled = state
        if state then
            StartESP()
        else
            ClearESP()
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end
})

-- Hapus ESP saat pemain keluar
Players.PlayerRemoving:Connect(function(player)
    local esp = ESPFolder:FindFirstChild(player.Name)
    if esp then esp:Destroy() end
end)

-- Settings Tab
local SettingsTab = Window:Tab({ Title = "Settings", Icon = "settings" })

-- Paragraph Info
SettingsTab:Paragraph({
    Title = "Interface",
    Desc = "Customize your GUI appearance."
})

-- Ambil semua theme yang tersedia
local themes = {}
for themeName,_ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

-- Load saved config (jika ada)
local savedConfig
if Window.ConfigManager then
    savedConfig = Window.ConfigManager:CreateConfig("Walvy Community"):Load()
end

-- Tentukan default values
local defaultTheme = (savedConfig and savedConfig.Theme) or WindUI:GetCurrentTheme()
local defaultTransparency = (savedConfig and savedConfig.TransparentMode ~= nil) and savedConfig.TransparentMode or true

-- Theme Dropdown
local themeDropdown = SettingsTab:Dropdown({
    Title = "Select Theme",
    Values = themes,
    Value = defaultTheme,
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "Theme Applied",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })

        -- Auto-save theme
        if Window.ConfigManager then
            local config = Window.ConfigManager:CreateConfig("Walvy Community")
            config:Set("Theme", theme)
            config:Set("TransparentMode", Window.TransparencyEnabled) -- simpan transparency juga
            config:Save()
        end
    end
})

-- Toggle Transparency
local transparentToggle = SettingsTab:Toggle({
    Title = "Transparency",
    Desc = "Makes the interface slightly transparent.",
    Value = defaultTransparency,
    Callback = function(state)
        Window:ToggleTransparency(state)
        WindUI.TransparencyValue = state and 0.1 or 1
        WindUI:Notify({
            Title = "Transparency",
            Content = state and "Transparency ON" or "Transparency OFF",
            Duration = 2
        })

        -- Auto-save transparency
        if Window.ConfigManager then
            local config = Window.ConfigManager:CreateConfig("Walvy Community")
            config:Set("Theme", WindUI:GetCurrentTheme()) -- simpan theme juga
            config:Set("TransparentMode", state)
            config:Save()
        end
    end
})

-- Apply default values saat GUI load
WindUI:SetTheme(defaultTheme)
Window:ToggleTransparency(defaultTransparency)
WindUI.TransparencyValue = defaultTransparency and 0.1 or 1

-- Optional: paragraph untuk info
SettingsTab:Paragraph({
    Title = "Configuration",
    Desc = "Theme and Transparency are auto-saved and auto-loaded."
})

local configName = ""

SettingsTab:Input({
    Title = "Config Name",
    Placeholder = "Enter config name",
    Callback = function(text)
        configName = text
    end
})

SettingsTab:Button({
    Title = "Save Config",
    Desc = "Save current theme and transparency",
    Callback = function()
        if configName ~= "" then
            local config = Window.ConfigManager:CreateConfig(configName)
            config:Register("Theme", themeDropdown)
            config:Register("Transparency", transparentToggle)
            config:Save()
            WindUI:Notify({
                Title = "Config Saved",
                Content = configName,
                Duration = 3
            })
        end
    end
})

SettingsTab:Button({
    Title = "Load Config",
    Desc = "Load saved configuration",
    Callback = function()
        if configName ~= "" then
            local config = Window.ConfigManager:CreateConfig(configName)
            local data = config:Load()
            if data then
                if data.Theme and table.find(themes, data.Theme) then
                    themeDropdown:Select(data.Theme)
                    WindUI:SetTheme(data.Theme)
                end
                if data.Transparency ~= nil then
                    transparentToggle:Set(data.Transparency)
                    Window:ToggleTransparency(data.Transparency)
                    WindUI.TransparencyValue = data.Transparency and 0.1 or 1
                end
                WindUI:Notify({
                    Title = "Config Loaded",
                    Content = configName,
                    Duration = 3
                })
            else
                WindUI:Notify({
                    Title = "Config Error",
                    Content = "Config file not found",
                    Duration = 3
                })
            end
        end
    end
})

local filesDropdown
local function listConfigFiles()
    local files = {}
    local path = "WindUI/" .. Window.Folder .. "/config"
    if not isfolder(path) then
        makefolder(path)
    end
    for _, file in ipairs(listfiles(path)) do
        local name = file:match("([^/]+)%.json$")
        if name then table.insert(files, name) end
    end
    return files
end

filesDropdown = SettingsTab:Dropdown({
    Title = "Select Config",
    Values = listConfigFiles(),
    Multi = false,
    AllowNone = true,
    Callback = function(selection)
        configName = selection
    end
})

SettingsTab:Button({
    Title = "Refresh List",
    Callback = function()
        filesDropdown:Refresh(listConfigFiles())
    end
})

-- Select first tab on GUI open
Window:SelectTab(1)
